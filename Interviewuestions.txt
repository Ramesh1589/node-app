https://www.geeksforgeeks.org/node-js-callback-concept/
https://blog.eduonix.com/web-programming-tutorials/learn-event-driven-programming-node-js/
What is node js?
    •	Node js is a java script runtime environment.
    •	It is built on Chrome's V8 JavaScript engine.
    •	Node js is open source.
    •	It provides an event driven, non-blocking (asynchronous) I/O and cross-platform runtime environment 
        for building highly scalable server-side application using JavaScript.

1.	Advantages of Node js
    •	Node js is open-source framework.
    •	Uses javascript to build entire server side application.
    •	Asynchronous by default so it performs faster than other frameworks.
    •	Cross Platform framework that runs on Windows, Mac Or Linux.
    •	NodeJS uses callbacks to avoid waiting for blocking I/O.

2.	What is Callback function ?
    •	A callback is a function which is called when a task is completed, 
        thus helps in preventing any kind of blocking and a callback function allows other code to run in the meantime.
    •	Callback is called when task get completed and is asynchronous equivalent for a function.
    •	Using Callback concept, Node.js can process a large number of requests without waiting 
        for any function to return the result which makes Node.js highly scalable.
    •	For Example: In Node.js, when a function start reading file, it returns the control to execution environment immediately 
        so that the next instruction can be executed. 
    •	Once file I/O gets completed, callback function will get called to avoid blocking or wait for File I/O.

3.	What is event driven Programming?
    •	JavaScript is an event-driven programming language which inherently supports non-blocking operations.
    •	Event-driven programming is a programming paradigm in which the flow of the program is determined 
        by events such as user actions (mouse clicks, key presses), sensor outputs, or messages from other programs/threads. 
        In practice, it means that applications act on events.
    •	When the event is executed, control is returned to the event loop and another event is processed.
    •	It means as soon as Node starts its server, it simply initiates its variables, declares functions 
        and then simply waits for event to occur.
    •	Event driven programming is a generic concept where event emitter emits the number of events and a main loop listens 
        to these events and immediately triggers a callback function as soon as the corresponding event is detected in that loop.

4.	What is Blocking IO ?
    •	Traditionally when a system or client  calls an I/O request that comes to a webserver and is assigned to an available thread or 
        each concurrent connection there is a thread. 
    •	The request is handled continuously on that thread until the request is complete and response is sent.  
    •	While handling the data between functions such as GetFile(file) & Open(File) there will be some amount of idle time. 
    •	Thread consumes memory, so a long-running thread for each connection & not using it is not efficient.

5.	What is Non-Blocking I/O ?
    •	A system or client or browser call is returned immediately without waiting for the data to be read or written (aka operation to complete). 
    •	If no results are available at the moment of the call, the function will simply return a predefined constant, 
        indicating that there is no data available to return at that moment.
    •	A loop iterate over the resource and when the resource is found (the operation is completed) it is returned. 
    •	This loop consumes CPU for iterating over the resource that is unavailable most of the time. 
        This is called busy-waiting. Traditional Non-Blocking I/O.

6.	What is Promises ?
    •	A promise is basically an advancement of callbacks in node. 
    •	While developing an application we may encounter that we are using a lot of nested callback functions.
    •	This is what happens due to the nesting of callback functions. 
    •	Now imagine if we need to perform multiple nested operations like this. 
    •	That would make our code messy and very complex. 
        In node.js world, this problem is called “Callback Hell”.
    •	To resolve this issue we need to get rid of the callback functions whilst nesting. 
    •	This is where Promises come into the picture.
    •	A Promise in node means an action which will either be completed or rejected. 
    •	In case of completion, the promise is kept and otherwise, the promise is broken. 
    •	So as the word suggests either the promise is kept or it is broken. 
    •	And unlike callbacks, promises can be chained.
    •	Once a promise is fulfilled or rejected, it is immutable (i.e. it can never change again).
    •	The core idea behind promises is that a promise represents the result of an asynchronous operation. A promise is in one of three different states:
    A promise has 3 states. They are:
        Pending: The initial state of a promise. And Promise is still pending i.e not fulfilled or rejected yet 
        Fulfilled: The state of a promise representing a successful operation.
        Rejected: The state of a promise representing a failed operation.
    Example:
    A Promise in short:
       "Imagine you are a kid. Your mom promises you that she'll get you a new phone next week." You don't know if you will get that phone until next week.
        Your mom can either really buy you a brand new phone, or stand you up and withhold the phone if she is not happy .
        That is a promise. A promise has 3 states. They are:
        
        Pending: You don't know if you will get that phone
        Fulfilled: Mom is happy, she buys you a brand new phone
        Rejected: Your mom is happy, she withholds the phone
        https://www.geeksforgeeks.org/es6-promises/

7. What .env file in node js and Why we use ? How to Save our confidwntial data at server side?
Ans: Node.js is an environment that helps you create server-side applications using JavaScript. 
    One of the common Node.js elements that developers like and use are .env files. 
    These files let you easily save and load environment variables. 
    Developers often use them to store confidential information. 
    However, sometimes they forget to disable access to these files from the outside, 
    which can lead to major security problems.

8. Where Do I Store Secrets?
Ans: Secret information, such as passwords and API keys, must be stored securely. 
    However, this information must also be easy to access and modify. 
    One of the common ways to store such information is using configuration files. 
    In the case of Node.js, a very popular approach is to use .env files. 
    Their big advantage is that such files are loaded automatically and put into environment variables. 
    This makes it very easy for developers to access them in the code.
    Ref: https://www.acunetix.com/blog/articles/secure-your-node-js-env-files/

9. What is Call stack and the call stack, event loop and callback queue ?    
Ans:
    - The call stack is a mechanism in Javascript used to keep track of where it is in a program. 
    - It knows which functions are currently being run and which to call next. 
    - The catch with the call stack is that you can only add things to the top of the stack. 
    - It’s a last-in-first-out (LIFO) idea.
    - When a function is called, it is added to the top of the stack and run. 
    - If that function calls another function, it is then added to the top of the stack and then it is run. 
    - Only the function at the top of the stack is the one that can be run.
    - The function gets added to the stack, then the statements inside the function get added as they are called and removed as they are executed. 
    Finally, main() is the only thing left and, in this case, the program is finished.
    - In an asynchronous program, there are a few more pieces that come into the mix. 
    - The first is the callback queue. 
    - This is a kind of holding area where callback functions go once they are called. 
    - The callback queue works together with the event loop to execute callback functions at the right time. 
    - The event loop checks the call stack to see if it is empty. 
    - If it is then the first callback function in the callback queue gets executed, then the second etc. 
    - If the call stack is not empty, then those callback functions wait.
    - This is what causes output from a callback function to appear after all of the other non-callback functions. 
    - The non-callback functions are like VIPs that don’t have to wait in line to get executed. 
    - Those callback functions are being held in a separate queue until it is their turn.
        1.Call Stack :- 
            It’s a data structure which records the function calls, basically where in the program we are. 
            If we call a function to execute , we push something on to the stack, and when we return from a function, 
            we pop off the top of the stack.
        2.Heap :- 
            Objects are allocated in a heap i.e mostly unstructured region of memory. 
            All the memory allocation to variables and objects happens here. 

        3.Queue :- 
            A JavaScript runtime contains a message queue, which is a list of messages to be processed and 
            associated callback functions to execute. When the stack has enough capacity, a message is taken out of the queue 
            and processed which consists of calling the associated function (and thus creating an initial stack frame). 
            The message processing ends when the stack becomes empty again. 
            In basic words , these messages are queued in response to external 
            async events(such as a mouse being clicked or receiving the response to an HTTP request), 
            given a callback function has been provided. 
            If, for example a user were to click a button and no callback function was provided — no message would have been enqueued.                   

        4.Event Loop :-
            The Event Loop now is responsible for the execution of these callbacks in the queue and pushing it in the stack, 
            when it is empty event loop basic job is to look both at the stack and the task queue, 
            pushing the first thing on the queue to the stack when it see stack as empty. 
            Each message or callback is processed completely before any other message is processed.    
    Ref:
    eg. https://medium.com/@thejasonfile/how-node-and-javascript-handle-asynchronous-functions-7feb9fc8a610
        https://medium.com/@gaurav.pandvia/understanding-javascript-function-executions-tasks-event-loop-call-stack-more-part-1-5683dea1f5ec

9. What is Express js ?
Ans: 
    - Express is a nodejs web application framework that provides a robust set of features for 
      web and mobile applications.
    - With a HTTP utility methods and middleware we creating a robust API is quick and easy.
    - Express provides a thin layer of fundamental web application features.


9. What is Middleware in node js ?
Ans: 
    - Middleware functions are functions that have access to the request object (req), 
     the response object (res), and the next function in the application’s request-response cycle. 
    - The next function is a function in the Express router which, when invoked, executes the middleware succeeding the current middleware.

    - Middleware functions can perform the following tasks:
        - Execute any code.
        - Make changes to the request and the response objects.
        - End the request-response cycle.
        - Call the next middleware in the stack.
        - If the current middleware function does not end the request-response cycle, 
        it must call next() to pass control to the next middleware function. Otherwise, the request will be left hanging.

    - The following figure shows the elements of a middleware function call:
        - Application-level middleware
        - Router-level middleware
        - Error-handling middleware
        - Built-in middleware
        - Third-party middleware

